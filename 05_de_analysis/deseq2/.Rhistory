if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.17")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("limma")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
library(Glimma)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Glimma")
library(DESeq2)
pwd
getwd()
setwd("C:/wsl.localhost/Ubuntu-20.04home/mb62095")
setwd("E:/Manja/deseq2")
install.packages("tidyverse")
args <- commandArgs(TRUE)
path <- as.character(args[1])
myoutname <-as.character(args[2])
print(paste0("############################"))
##Read files names
files <- list.files(path=path, pattern="*.tsv")
##Read files names
files <- list.files(path="E:/Manja/deseq2", pattern="*.tsv")
print(sprintf("## Files to be merged are: ##"))
print(files)
print(paste0("############################"))
# using perl to manpulate file names by trimming file extension
labs <- paste("", gsub("\\.tsv", "", files, perl=TRUE), sep="")
##Load all files to list object, use paste to return the trimpping parts to file name
print(sprintf("######### file read START ######### %s", format(Sys.time(),"%b_%d_%Y_%H_%M_%S_%Z")))
cov <- list()
for (i in labs) {
filepath <- file.path(path,paste(i,".tsv",sep=""))
cov[[i]] <- read.table(filepath,sep = "\t", header=F, stringsAsFactors=FALSE)
colnames(cov[[i]]) <- c("ENSEMBL_GeneID", i)
}
filepath <- file.path(path,paste(i,".tsv",sep=""))
Rscript htseq-combine_all.R "E:/Manja/deseq2" counts
Rscript htseq-combine_all.R E:/Manja/deseq2 counts
Rscript
Rscript htseq-combine_all.R
library("pasilla")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("pasilla")
library("pasilla")
pasCts <- system.file("extdata",
"pasilla_gene_counts.tsv",
package="pasilla", mustWork=TRUE)
pasAnno <- system.file("extdata",
"pasilla_sample_annotation.csv",
package="pasilla", mustWork=TRUE)
cts <- as.matrix(read.csv(pasCts,sep="\t",row.names="gene_id"))
View(cts)
coldata <- read.csv(pasAnno, row.names=1)
coldata <- coldata[,c("condition","type")]
coldata$condition <- factor(coldata$condition)
coldata$type <- factor(coldata$type)
View(coldata)
View(cts)
View(coldata)
load("E:/Manja/deseq2/counts.txt")
counts=load("E:/Manja/deseq2/counts.txt")
cts <- as.matrix(read.txt("E:/Manja/deseq2/counts.txt",sep="\t",row.names="gene_id"))
cts <- as.matrix("E:/Manja/deseq2/counts.txt",sep="\t",row.names="gene_id")
cts <- as.matrix(read.csv("E:/Manja/deseq2/counts.csv",sep="\t",row.names="gene_id"))
library(Matrix)
cts <- as.matrix(read.csv("E:/Manja/deseq2/counts.csv",sep="\t",row.names="gene_id"))
load("E:/Manja/deseq2/counts.csv")
counts=read.csv("E:/Manja/deseq2/counts.csv",sep="\t",row.names="gene_id")
counts=read.csv(E:/Manja/deseq2/counts.csv,sep="\t",row.names="gene_id")
counts=read.csv("E:/Manja/deseq2/counts.csv",sep="\t",row.names="gene_id")
counts <- read.delim("E:/Manja/deseq2/counts.csv", header=FALSE)
View(counts)
cts <- as.matrix(read.csv(counts,sep="\t",row.names="gene_id"))
View(counts)
View(counts)
counts <- read.delim("E:/Manja/deseq2/counts.csv", header=TRUE)
cts <- as.matrix(read.csv(counts,sep="\t",row.names="gene_id"))
View(cts)
cts <- as.matrix(read.csv(pasCts,sep="\t",row.names="gene_id"))
cts <- as.matrix(read.csv(counts,sep="\t",row.names="ENSEMBL_GeneID"))
counts <- read.delim("E:/Manja/deseq2/counts.csv", header=TRUE, row.names="ENSEMBL_GeneID")
cts=as.matrix(counts)
View(cts)
View(coldata)
coldata <- read.csv(pasAnno, row.names=1)
coldata <- coldata[,c("condition","type")]
coldata$condition <- factor(coldata$condition)
coldata$type <- factor(coldata$type)
View(coldata)
View(counts)
View(coldata)
view(pasilla_sample_annotation.csv)
coldata <- read.csv("E:/Manja/deseq2/coldata.csv", row.names=1)
View(coldata)
coldata <- coldata[,c("condition","type")]
View(coldata)
coldata$condition <- factor(coldata$condition)
coldata$type <- factor(coldata$type)
head(cts,2)
coldata
all(rownames(coldata) %in% colnames(cts))
all(rownames(coldata) == colnames(cts))
directory <- "E:/Manja/deseq2/"
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ condition)
dds
sampleFiles <- grep("treated",list.files(directory),value=TRUE)
sampleCondition <- sub("(.*treated).*","\\1",sampleFiles)
sampleTable <- data.frame(sampleName = sampleFiles,
fileName = sampleFiles,
condition = sampleCondition)
sampleTable$condition <- factor(sampleTable$condition)
View(sampleTable)
sampleFiles <- grep("cut_",list.files(directory),value=TRUE)
sampleFiles <- grep("treated",list.files(directory),value=TRUE)
sampleFiles <- grep("cut_",list.files(directory),value=TRUE)
sampleCondition <- sub("(.*cut_).*","\\1",sampleFiles)
sampleFiles <- grep("treated",list.files(directory),value=TRUE)
sampleCondition <- sub("(.*treated).*","\\1",sampleFiles)
sampleTable <- data.frame(sampleName = sampleFiles,
fileName = sampleFiles,
condition = sampleCondition)
View(sampleTable)
sampleTable$condition <- factor(sampleTable$condition)
View(sampleTable)
sampleCondition
sampleFiles
sampleCondition2 = "treated" "treated" "treated"   "untreated" "untreated" "untreated" "untreated"
sampleCondition2 = {"treated" "treated" "treated"   "untreated" "untreated" "untreated" "untreated"}
sampleCondition2 = list("treated" "treated" "treated"   "untreated" "untreated" "untreated" "untreated")
sampleCondition
sampleCondition2 = c("treated" "treated" "treated"   "untreated" "untreated" "untreated" "untreated")
sampleCondition2 = "treated", "treated", "treated", "untreated", "untreated", "untreated", "untreated"
sampleCondition2 = c("treated", "treated", "treated", "untreated", "untreated", "untreated", "untreated")
sampleFiles <- grep("cut_",list.files(directory),value=TRUE) #Makes a list of sample names
#If you cannot do it with sub, write them out on your own - be careful of the order you are writing them in.
sampleCondition = c("untreated", "treated")
sampleTable <- data.frame(sampleName = sampleFiles,
fileName = sampleFiles,
condition = sampleCondition)
sampleTable$condition <- factor(sampleTable$condition)
View(sampleTable)
sampleTable <- data.frame(sampleName = sampleFiles,
fileName = gsub("(.*tsv).", sampleFiles)
condition = sampleCondition)
sampleTable <- data.frame(sampleName = sampleFiles,
fileName = gsub('.tsv', '', sampleFiles)
condition = sampleCondition)
sampleTable <- data.frame(sampleName = sampleFiles,
fileName = gsub('[.tsv]', '', sampleFiles)
condition = sampleCondition)
sampleNames <- gsub('[.tsv]', '', sampleFiles)
sampleNames <- gsub("(.*tsv).*", '', sampleFiles)
sampleNames <- gsub("[.tsv]", '', sampleFiles)
sampleNames <- gsub('.tsv', '', sampleFiles)
sampleTable <- data.frame(sampleName = sampleNames,
fileName = sampleFiles,
condition = sampleCondition)
sampleTable$condition <- factor(sampleTable$condition)
View(sampleTable)
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = directory,
design= ~ condition)
View(dds)
View(ddsHTSeq)
View(ddsHTSeq)
View(dds)
ddsHTSeq@colData
View(dds)
dds@colData
smallestGroupSize <- 1
keep <- rowSums(counts(dds) >= 10) >= smallestGroupSize
dds <- dds[keep,]
ddsHTSeq <- ddsHTSeq[keep,]
dds$condition <- relevel(dds$condition, ref = "untreated")
dds <- DESeq(dds)
res <- results(dds)
dds <- DESeq(dds)
res <- results(dds)
dds_DESEQ2 <- DESeq(dds)
ddsHTSeq <- DESeq(ddsHTSeq)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("NOISeq")
counts <- read.delim("E:/Manja/deseq2/counts_fake.csv", header=TRUE, row.names="ENSEMBL_GeneID")
counts <- read.delim("E:/Manja/deseq2/counts.csv", header=TRUE, row.names="ENSEMBL_GeneID")
counts <- read.delim("E:/Manja/deseq2/counts_fake.csv", header=TRUE, row.names="ENSEMBL_GeneID")
counts <- read.delim("E:/Manja/deseq2/counts_fake.csv", header=TRUE)
View(counts)
Rscript htseq-combine_all.R <arg1> <arg2>
counts <- read.delim("E:/Manja/deseq2/counts.csv", header=TRUE, row.names="ENSEMBL_GeneID")
counts <- read.csv("E:/Manja/deseq2/counts.csv", header=TRUE, row.names="ENSEMBL_GeneID")
counts <- read.csv("E:/Manja/deseq2/counts_fake.csv", header=TRUE, row.names="ENSEMBL_GeneID")
View(counts)
cts=as.matrix(counts)
coldata <- read.csv("E:/Manja/deseq2/coldata.csv", row.names=1)
coldata <- coldata[,c("condition","type")]
coldata$condition <- factor(coldata$condition)
coldata$type <- factor(coldata$type)
counts <- read.csv("E:/Manja/deseq2/counts_fake.csv", header=TRUE, row.names="ENSEMBL_GeneID")
cts=as.matrix(counts)
coldata <- read.csv("E:/Manja/deseq2/coldata.csv", row.names=1)
coldata <- coldata[,c("condition","type")]
View(coldata)
coldata <- read.csv("E:/Manja/deseq2/coldata.csv", row.names=1)
View(coldata)
View(coldata)
View(coldata)
coldata <- read.csv("E:/Manja/deseq2/coldata.csv", row.names=1)
coldata <- coldata[,c("condition","type")]
coldata$condition <- factor(coldata$condition)
coldata$type <- factor(coldata$type)
all(rownames(coldata) %in% colnames(cts))
all(rownames(coldata) == colnames(cts))
View(counts)
coldata <- read.csv("E:/Manja/deseq2/coldata.csv", row.names=1)
coldata <- coldata[,c("condition","type")]
coldata$condition <- factor(coldata$condition)
coldata$type <- factor(coldata$type)
all(rownames(coldata) %in% colnames(cts))
all(rownames(coldata) == colnames(cts))
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ condition)
smallestGroupSize <- 1
keep <- rowSums(counts(dds) >= 10) >= smallestGroupSize
dds <- dds[keep,]
dds$condition <- relevel(dds$condition, ref = "untreated")
dds_DESEQ2 <- DESeq(dds)
res <- results(dds)
counts <- read.delim("E:/Manja/deseq2/counts_fake.csv", header=TRUE, row.names="ENSEMBL_GeneID")
counts <- read.csv("E:/Manja/deseq2/counts_fake.csv", header=TRUE, row.names="ENSEMBL_GeneID")
cts=as.matrix(counts)
View(coldata)
all(rownames(coldata) %in% colnames(cts))
all(rownames(coldata) == colnames(cts))
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ condition)
counts <- read.csv("E:/Manja/deseq2/counts_fake.csv", header=TRUE, row.names="ENSEMBL_GeneID")
cts=as.matrix(counts)
all(rownames(coldata) %in% colnames(cts))
all(rownames(coldata) == colnames(cts))
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ condition)
smallestGroupSize <- 1
keep <- rowSums(counts(dds) >= 10) >= smallestGroupSize
dds <- dds[keep,]
dds$condition <- relevel(dds$condition, ref = "untreated")
dds <- nbinomWaldTest(dds)
dds_DESEQ2 <- DESeq(dds)
res <- results(dds)
setwd("E:/Manja/egdeR")
